import type { Connection } from 'mysql2/promise';
import { EOL } from 'os';

export type DynamicQuery01DynamicParams = {
    select?: DynamicQuery01Select;
    params?: DynamicQuery01Params;
    where?: DynamicQuery01Where[];
}

export type DynamicQuery01Params = {
    name?: string;
    description?: string;
}

export type DynamicQuery01Result = {
    id?: number;
    value?: number;
    name?: string;
    description?: string;
}

export type DynamicQuery01Select = {
    id?: boolean;
    value?: boolean;
    name?: boolean;
    description?: boolean;
}

export type DynamicQuery01Where = [string, string, ...any];

export async function dynamicQuery01(connection: Connection, params?: DynamicQuery01DynamicParams): Promise<DynamicQuery01Result[]> {
    const where = whereConditionsToObject(params?.where);
    const paramsValues: any = [];
    let sql = 'SELECT';
    if (params?.select == null || params.select.id) {
        sql = appendSelect(sql, `m1.id`);
    }
    if (params?.select == null || params.select.value) {
        sql = appendSelect(sql, `m1.value`);
    }
    if (params?.select == null || params.select.name) {
        sql = appendSelect(sql, `m2.name`);
    }
    if (params?.select == null || params.select.description) {
        sql = appendSelect(sql, `m2.descr as description`);
    }
    sql += EOL + `FROM mytable1 m1`;
    if (params?.select == null || params.select.name || params.select.description || params.params?.name != null || params.params?.description != null || where.name != null || where.description != null) {
        sql += EOL + `INNER JOIN mytable2 m2 on m1.id = m2.id`;
    }
    sql += EOL + `WHERE 1 = 1`;
    if (params?.params?.name != null) {
        sql += EOL + `AND m2.name = ?`;
        paramsValues.push(params.params.name);
    }
    if (params?.params?.description != null) {
        sql += EOL + `AND m2.descr = ?`;
        paramsValues.push(params.params.description);
    }
    params?.where?.forEach(condition => {
        const where = whereCondition(condition);
        sql += EOL + 'AND ' + where.sql;
        paramsValues.push(...where.values);
    });
    return connection.query({ sql, rowsAsArray: true }, paramsValues)
        .then(res => res[0] as any[])
        .then(res => res.map(data => mapArrayToDynamicQuery01Result(data, params?.select)));
}

function mapArrayToDynamicQuery01Result(data: any, select?: DynamicQuery01Select) {
    const result = {} as DynamicQuery01Result;
    let rowIndex = 0;
    if (select == null || select.id) {
        result.id = data[rowIndex++];
    }
    if (select == null || select.value) {
        result.value = data[rowIndex++];
    }
    if (select == null || select.name) {
        result.name = data[rowIndex++];
    }
    if (select == null || select.description) {
        result.description = data[rowIndex++];
    }
    return result;
}

function appendSelect(sql: string, selectField: string) {
    if (sql == 'SELECT') {
        return sql + EOL + selectField;
    }
    else {
        return sql + ', ' + EOL + selectField;
    }
}

function whereConditionsToObject(whereConditions?: DynamicQuery01Where[]) {
    const obj = {} as any;
    whereConditions?.forEach(whereCondition => {
        obj[whereCondition[0]] = true;
    });
    return obj;
}

export type WhereConditionResult = {
    sql: string;
    values: any[];
}

function whereCondition(condition: DynamicQuery01Where): WhereConditionResult {
    const selectFragments = {
        id: `m1.id`,
        value: `m1.value`,
        name: `m2.name`,
        description: `m2.descr`,
    } as any;

    const operators = {
        '=': '=',
        '<>': '<>',
        '>': '>',
        '<': '<',
        '>=': '>=',
        '<=': '<=',
        'LIKE': 'LIKE',
        'BETWEEN': 'BETWEEN',
        'IN': 'IN',
        'NOT IN': 'NOT IN'
    } as any;

    const selectFragment = selectFragments[condition[0]];
    const operator = operators[condition[1]];

    if (operator == 'LIKE') {
        return {
            sql: `${selectFragment} LIKE concat('%', ?, '%')`,
            values: [condition[2]]
        }
    }
    if (operator == 'BETWEEN') {
        return {
            sql: `${selectFragment} BETWEEN ? AND ?`,
            values: [condition[2], condition[3]]
        }
    }
    if (operator == 'IN' || operator == 'NOT IN') {
        return {
            sql: `${selectFragment} ${operator} (?)`,
            values: condition[2]
        }
    }
    return {
        sql: `${selectFragment} ${operator} ?`,
        values: [condition[2]]
    }
}