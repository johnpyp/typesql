import { Client } from '@libsql/client';

export type InsertIntoMytable1Params = {
	id: number;
	value?: number;
}

export type InsertIntoMytable1Result = {
	rowsAffected: number;
	lastInsertRowid: number;
}

export async function insertIntoMytable1(client: Client, params: InsertIntoMytable1Params): Promise<InsertIntoMytable1Result> {

	const keys = Object.keys(params) as Array<keyof InsertIntoMytable1Params>;
	const columns = keys.filter(key => params[key] !== undefined);
	const values = columns.map(col => params[col]!);

	const sql = columns.length == 0
		? `INSERT INTO mytable1 DEFAULT VALUES`
		: `INSERT INTO mytable1(${columns.join(',')}) VALUES(${columns.map(_ => '?').join(',')})`

	return client.execute({ sql, args: values })
		.then(res => mapArrayToInsertIntoMytable1Result(res));
}

function mapArrayToInsertIntoMytable1Result(data: any) {
	const result: InsertIntoMytable1Result = {
		rowsAffected: data.rowsAffected,
		lastInsertRowid: data.lastInsertRowid
	}
	return result;
}